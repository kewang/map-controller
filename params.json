{"name":"Map-controller","tagline":"Control Google Maps v2 for Android","body":"# map-controller\r\n\r\nControl Google Maps v2 for Android\r\n\r\n## Prerequisite\r\n\r\nYou must know how to set up your Maps v2 from [official article](https://developers.google.com/maps/documentation/android/start).\r\n\r\n## Set up library\r\n\r\nBecause the library project always contains the newest official library project, you just only import the library project to your Android project.\r\n\r\n## How to use\r\n\r\n### Initialize\r\n\r\nAt first, you must use to `MapController#initialize(Context)` to initial Google Maps at `android.app.Application` and remember to update `AndroidManifest.xml`.\r\n\r\n```java\r\n@Override\r\npublic void onCreate() {\r\n  super.onCreate();\r\n\r\n  try {\r\n    MapController.initialize(this);\r\n  } catch (GooglePlayServicesNotAvailableException e) {\r\n    e.printStackTrace();\r\n\r\n    Toast.makeText(this, R.string.common_google_play_services_enable_text, Toast.Length_SHORT).show();\r\n  }\r\n}\r\n```\r\n\r\n### Attach\r\n\r\nWhen using it, You must create an instance to attach map from `MapView#getMap()` / `MapFragment#getMap()`.\r\n\r\n```java\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n\tMapController mc = new MapController(mv.getMap());\r\n}\r\n```\r\n\r\n### Show my location\r\n\r\nTypically, you can use `MapController#showMyLocation()` to show your location.\r\n\r\n### Move to my location\r\n\r\nYou can use `MapController#moveToMyLocation()` to move your current location. Also you can use `MapController#animateToMyLocation()` to move smoothly.\r\n\r\n### Get my location\r\n\r\nYou can use `MapController#getMyLocation()` to get your current location.\r\n\r\n### Tracking my location\r\n\r\nIf you want to track your location at runtime and do something. You can use `MapController#startTrackMyLocation()` like this:\r\n\r\n```java\r\nmc.startTrackMyLocation(new ChangeMyLocation() {\r\n\t@Override\r\n\tpublic void changed(GoogleMap map, Location location) {\r\n\t\tToast.makeText(TrackingMyLocation.this, location.toString(), Toast.LENGTH_SHORT).show();\r\n\t}\r\n});\r\n```\r\n\r\nAnd don't forget to stop tracking `MapController#stopTrackMyLocation()` when you leave the activity or service.\r\n\r\n### Move to specific location\r\n\r\nIf you want to move to specific location, you can use `MapController#moveTo(LatLng)` or `MapController#animateTo(LatLng)` like this:\r\n\r\n```java\r\nLatLng latLng = new LatLng(25.03338, 121.56463);\r\n\r\nmc.animateTo(latLng, new ChangePosition() {\r\n\t@Override\r\n\tpublic void changed(GoogleMap map, CameraPosition position) {\r\n\t\tToast.makeText(ShowSpecificLocation.this, position.toString(), Toast.LENGTH_SHORT).show();\r\n\t}\r\n});\r\n```\r\n\r\n### Add marker\r\n\r\nYou can use `MapController#addMarker(MarkerOptions)` to add marker to map, like this:\r\n\r\n```java\r\nmc.addMarker(opts, new MarkerCallback() {\r\n\t@Override\r\n\tpublic void invokedMarker(GoogleMap map, Marker marker) {\r\n\t\tToast.makeText(AddMarker.this, marker.getId(), Toast.LENGTH_SHORT).show();\r\n\t}\r\n});\r\n```\r\n\r\n### Add bulk markers\r\n\r\nYou can also use `MapController#addMarkers(ArrayList<MarkerOptions>)` to add bulk markers to map.\r\n","google":"UA-2030167-3","note":"Don't delete this file! It's used internally to help with page regeneration."}